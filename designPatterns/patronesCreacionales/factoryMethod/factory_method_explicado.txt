Factory Method es un patron de diseño creacional que proporciona una interfaz para crear objetos en una superclase, mientras permite a las subclases alterar el tipo de objetos que se crearán.

				       	PROBLEMA
Imagina que estás creando una aplicacion de gestion logística. La primera version de tu aplicación sólo es capaz de manejar el transporte en camión, por lo que la mayor parte de tu código se encuentra dentro de la clase Camión.

Al cabo de un tiempo, tu aplicación se vuelve bastante popular. Cada dia recibes decenas de peticiones de empresas de transporte maritimo para que incorpores la logistica por mar a la aplicación

	- Añadir una nueva clase al programa no es tan sencillo si el resto del codigo ya esta acoplado a clases existentes. -

Estupendo, ¿verdad? Pero, ¿qué pasa con el código? En este momento, la mayor parte de tu código está acoplado a la clase Camión. Para añadir barcos a la aplicación habría que hacer cambios en toda la base del código. Además, si más tarde decides añadir otro tipo de transporte a la aplicación, probablemente tendrás que volver a hacer todos estos cambios.

Al final acabarás con un código bastante sucio, plagado de condicionales que cambian el comportamiento de la aplicación dependiendo de la clase de los objetos de transporte.


					Solución
El patrón Factory Method sugiere que, en lugar de llamar al operador ´new´ para construir objetos directamente, se invoque a un método fábrica especial. No te preocuopes: los objetos se siguen creando a través del operador ´new´, pero se invocan desde el método fábrica. Los objetos devueltos por el método fábrica a menudo se denominan productos.

A simple vista, puede parecer qwue este cambio no tiene sentido, ya que tan solo hemos cambiado el luagr desde donde invocamos al constructor. Sin embargo, piensan en esto: ahora puedes sobrescribir el metodo fabrica en una subclase y cambiar la clase de  los productos creados por el metodo.

No obstante, hay una pequeña limitacion: las subclases solo pueden devolver productos de distintos tipos si dichos productos tienen una clase base o interfaz comun. Ademas, el metodo fabrica en la clase base debe tener su tipo de retorno declarado como dicha interfaz.

		- Todos los productos deben seguir la misma interfaz -

Por ejemplo, tanto la clase Camion como la clase Barco deben implementar la interfaz transporte, que declara un metodo llamado entrega. Cada clase implementa este metodo de forma diferente: los camiones entregan su crag por tierra, mientras que los barcos lo jacen por mar. El metodo fabrica dentro de la clase LogisticaTerrestre devuelve objetos de tipo camion, mientras que el metodo fabrica de la clase LogisticaMaritima devuelve barcos.

	- Siempre y cuando todas las clases de producto implementen una interfaz comun, podras pasar sus objetos al codigo cliente sin descomponerlo -

El codigo que utiliza el metodo fabrica (a menudo denominado codigo cliente) no encuentra diferencias entre los productos devueltos por varias subclases, y trata a todos los productos como la clase abstracta Transporte. El cliente sabe que todos los objetos de transporte deben tener el metodo entrega, pero no necesita saber como funciona exactamenente

1. El producto declara la interfaz, que es comun a todos los objetos que puede producir la clase creadora y sus subclases.

2. Los productos concretos son distintas implementaciones de la interfaz de producto.

			
				
				       Aplicabilidad 
Utiliza el metodo fabrica cuando no conozcas de antemano las dependencias y los tipos exactos de los objetos con los que deba funcionar tu codigo.

El patron factory method separa el codigo de construccion de producto del codigo que hace uso del producto. Por ello, es mas facil extender el codigo de construccion de producto de fomra independiente al resto del codigo.

Por ejemplo, para añadir un nuevo tipo de producto a la aplicacion, solo tendras que crear una nueva subclase creadora y sobrescribir el factory method que contiene.

Utiliza el factory method cuando quieras ofrecer a los usuarios de tu biblioteca o framework, una forma de extender sus componentes internos.

Hay mucho mas pero me da flojera escribir xd 
